I am using AKS as my Kubernetes cluster and Terraform as a substitute to YAML file.

Pre-Requisite: -
  1. Azure Account
  2. Azure Kubernetes Cluster
  3. Terraform (Default in Azure CLI)

Once you have your Kubernetes cluster up and running, open Azure CLI and run following commands in sequence manner: -

divyajeet@Azure:~$ mkdir AKS-Deployment
divyajeet@Azure:AKS-Deployment$ cd AKS-Deployment
divyajeet@Azure:AKS-Deployment$ vim deployment.tf

#Start Insert mode of VIM and paste the following code

provider "kubernetes" {
  host = "https://my-aks-dns-301c8697.hcp.centralindia.azmk8s.io:443"

  username = "Your Cluster Name"
  password = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
}

resource "kubernetes_deployment" "deployment" {
  metadata {
    name = "nginx-deployment"
    labels = {
      app = "nginx-default"
    }
    namespace = "my-namespace"
  }

  spec {
    replicas = 3

    selector {
      match_labels = {
        app = "nginx"
        version = "v1"
      }
    }

    strategy {
      type = "RollingUpdate" 
        rolling_update {
          max_surge = "50%"
          max_unavailable = "34%"
      }
    }

    template {
      metadata {
        labels = {
          app = "nginx"
          version = "v1"
          deployed_by = "Divyajeet-Singh"
        }
      }

      spec {
        container {
          image = "nginx:latest"
          name  = "nginx-pod"
          port {
            container_port = 8080
          }
        }
      }
    }
  }
}

#save the file with wq

Now running following commands and see Terraform's magic

divyajeet@Azure:AKS-Deployment$ terraform plan

You would see what will terraform create. At this moment of time Terraform also creates a state file which contain all the information related to changes being made to infrastructure. Make sure to keep this file safe as it will contain the credentials of your cluster.

divyajeet@Azure:AKS-Deployment$ terraform apply

You now have a deployment with rolling update deployed on your AKS cluster.
To test your deployment was successful login to your cluster, then 
curl  <clusterIP>:8080

You can also use Kubernetes Service to expose this deployment to the world. This will deploy an Load Balancer in Azure and then you would be able to access Nginx from anywhere around the world.
