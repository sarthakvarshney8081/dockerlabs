I am using Azure Kubernetes Service and Azure CLI for this demonstration purpose. AKS cluster deployment is similar to GKE with Azure specific parameters. This demo will create Nginx Pods and expose them to internet in a declarative fashion. For non-declarative method visit: - http://dockerlabs.collabnix.com/kubernetes/beginners/workshop/lab00-running-nginx-pod/
To start with, login and open Azure CLI. If you are opening Azure CLI for the first time, azure automatically creates a Cloud Shell Storage for you to save your files for future use.

Once you are in the cloud shell and AKS cluster deployed run the following command to get connected to your Kubernetes cluster: -

divyajeet@Azure:$ az aks get-credentials -n my-aks-cluster -g AKS-TEST
Merged "my-aks-cluster" as current context in /home/divyajeet/.kube/config

Next create a new directory in cloud storage and create nginx-deploy.yaml (To create Deployment using Nginx Containers) and nginx-svc.yaml (For exposing the Nginx service to web) by running the following command:-

divyajeet@Azure:$mkdir Nginx
divyajeet@Azure:$cd Nginx
divyajeet@Azure:~/Nginx$ nano nginx-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-nginx
  labels:
    app: my-nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-nginx
  template:
    metadata:
      labels:
        app: my-nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80

Save the file using "Ctrl + X" and then "Y". 
Next create nginx-svc.yaml

divyajeet@Azure:~/Nginx$ nano nginx-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-svc
spec:
  selector:
    app: my-nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer

Save the file using "Ctrl + X" and then "Y".

Now we need ask AKS to schedule our deployment in AKS cluster and we would monitor them using the following commands: -

divyajeet@Azure:~/Nginx$ kubectl apply -f nginx-deploy.yaml
deployment.apps/my-nginx created
divyajeet@Azure:~/Nginx$ kubectl get deployment
NAME       READY   UP-TO-DATE   AVAILABLE   AGE
my-nginx   2/2     2            2           15s
divyajeet@Azure:~/Nginx$ kubectl get pods
NAME                        READY   STATUS    RESTARTS   AGE
my-nginx-64d6456549-gv8rr   1/1     Running   0          27s
my-nginx-64d6456549-ngh7v   1/1     Running   0          27s
divyajeet@Azure:~/Nginx$ kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.0.0.1     <none>        443/TCP   34m

You can get more information on deployment and pods by using the following commands: -

divyajeet@Azure:~/Nginx$ kubectl describe pods my-nginx-64d6456549-gv8rr
divyajeet@Azure:~/Nginx$ kubectl describe deployment my-nginx

Once you have completed the deployment now its the time to expose your deployment to the web so that consumers can consume your service. We achieve this by creating the service in a declarative manner.
We already created nginx-svc.yaml, now letâ€™s ask AKS to deploy a load balancer for us and expose our deployment to the web. This can be achieved by running the following commands: -

divyajeet@Azure:~/Nginx$ kubectl apply -f nginx-svc.yaml
service/nginx-svc created
divyajeet@Azure:~/Nginx$ kubectl get svc
NAME         TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
kubernetes   ClusterIP      10.0.0.1       <none>        443/TCP        35m
nginx-svc    LoadBalancer   10.0.146.156   <pending>     80:30214/TCP   5s

Currently the EXTERNAL-IP status is pending but as soon as you see an IP there, you can open that IP in your web browser to see the results.
Run the following commands to test your service.

divyajeet@Azure:~/Nginx$ kubectl get svc
NAME         TYPE           CLUSTER-IP     EXTERNAL-IP     PORT(S)        AGE
kubernetes   ClusterIP      10.0.0.1       <none>          443/TCP        38m
nginx-svc    LoadBalancer   10.0.146.156   40.91.118.170   80:30214/TCP   2m54s
divyajeet@Azure:~/Nginx$ curl 40.91.118.170
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>

Congratulations you have successfully deployed Nginx and exposed it to web using a declarative model.

Now you can modify any changes to the YAML file and ask the AKS to update the changes to your deployment. Magic happens at the backend and you would be able to see the changes.

Last and final step: - Delete your deployment and remove your cluster to avoid any extra charges in your account. Following are the commands to do it.

divyajeet@Azure:~/Nginx$ az aks delete -n my-aks-cluster -g AKS-TEST

Or directly remove the resource group by using the following command: -

divyajeet@Azure:~/Nginx$ az group delete -n AKS-TEST
divyajeet@Azure:~/Nginx$ az group delete -n MC_AKS-TEST_my-aks-cluster_westus2
