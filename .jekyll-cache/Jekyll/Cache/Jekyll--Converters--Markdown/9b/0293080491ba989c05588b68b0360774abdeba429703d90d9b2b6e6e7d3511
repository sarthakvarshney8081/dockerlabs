I"ﬂ<p>Note: readme.md / dir file name must be like this ` ex:docker_beginner_track `[don‚Äôt add spaces]</p>

<p>if your not able to understant how to contribute ? please dm in collabnix slack #issue channel</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: default
title: Track name 
description: collabnix | DockerLab | Docker/k8s - track name 
---
</code></pre></div></div>
<p>Note: add above code top of the(in header) readme.md</p>

<h1 id="demonstrating-hello-world-example">Demonstrating Hello World Example</h1>

<h2 id="tested-infrastructure">Tested Infrastructure</h2>

<table class="tg">
  <tr>
    <th class="tg-yw4l"><b>Platform</b></th>
    <th class="tg-yw4l"><b>Number of Instance</b></th>
    <th class="tg-yw4l"><b>Reading Time</b></th>
    
  </tr>
  <tr>
    <td class="tg-yw4l"><b> Play with Docker</b></td>
    <td class="tg-yw4l"><b>1</b></td>
    <td class="tg-yw4l"><b>5 min</b></td>
    
  </tr>
  
</table>

<h2 id="pre-requisite">Pre-requisite</h2>

<ul>
  <li>Create an account with <a href="https://hub.docker.com">DockerHub</a></li>
  <li>Open <a href="https://labs.play-with-docker.com/">PWD</a> Platform on your browser</li>
  <li>Click on <strong>Add New Instance</strong> on the left side of the screen to bring up Alpine OS instance on the right side</li>
</ul>

<h2 id="running-hello-world-example">Running Hello World Example</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ docker run hello-world

</code></pre></div></div>

<p>If you want to add some img to readme.md make sure it will be like ‚Äòhttps://raw.githubusercontent.com/collabnix/dockerlabs/master/beginners/images/b301_helloworld.png‚Äô raw format. you will get file link from download button.</p>

<p><img src="https://raw.githubusercontent.com/collabnix/dockerlabs/master/beginners/images/b301_helloworld.png" alt="alt text" /></p>

<h2 id="explanation">Explanation</h2>

<p>This image is a prime example of using the scratch image effectively. See hello.c in https://github.com/docker-library/hello-world for the source code of the hello binary included in this image.</p>

<p>So what‚Äôs happened here? We‚Äôve called the docker run command, which is responsible for launching containers.</p>

<p>The argument hello-world is the name of the image someone created on dockerhub for us. It will first search for ‚Äúhello-world‚Äù image locally and then search in Dockerhub.</p>

<p>Once the image has been downloaded, Docker turns the image into a running container and executes it.</p>

<h2 id="did-you-know">Did you Know?</h2>

<ol>
  <li>The Hello World Docker Image is only 1.84 KB size.</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[node1] (local) root@192.168.0.18 ~
$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hello-world         latest              4ab4c602aa5e        6 weeks ago         1.84kB
</code></pre></div></div>

<ol>
  <li>While running <code class="language-plaintext highlighter-rouge">docker ps</code> command, it doesn‚Äôt display any running container. Reason - It gets executed once and exit immediately.</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS
      PORTS               NAMES
</code></pre></div></div>

<ol>
  <li>You can use <code class="language-plaintext highlighter-rouge">docker inspect &lt;imagename&gt;</code> command to inspect about this particular Docker Image.</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ docker inspect 4ab
[
    {
        "Id": "sha256:4ab4c602aa5eed5528a6620ff18a1dc4faef0e1ab3a5eddeddb410714478c67f",
        "RepoTags": [
            "hello-world:latest"
        ],
        "RepoDigests": [
            "hello-world@sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788"
        ],
        "Parent": "",
        "Comment": "",
        "Created": "2018-09-07T19:25:39.809797627Z",
        "Container": "15c5544a385127276a51553acb81ed24a9429f9f61d6844db1fa34f46348e420",
        "ContainerConfig": {
            "Hostname": "15c5544a3851",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
            ],
            "Cmd": [
                "/bin/sh",
                "-c",
                "#(nop) ",
                "CMD [\"/hello\"]"
            ],
            "ArgsEscaped": true,
            "Image": "sha256:9a5813f1116c2426ead0a44bbec252bfc5c3d445402cc1442ce9194fc1397027",
            "Volumes": null,
            "WorkingDir": "",
            "Entrypoint": null,
            "OnBuild": null,
            "Labels": {}
        },
        "DockerVersion": "17.06.2-ce",
        "Author": "",
        "Config": {
            "Hostname": "",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
            ],
            "Cmd": [
                "/hello"
            ],
            "ArgsEscaped": true,
            "Image": "sha256:9a5813f1116c2426ead0a44bbec252bfc5c3d445402cc1442ce9194fc1397027",
            "Volumes": null,
            "WorkingDir": "",
            "Entrypoint": null,
            "OnBuild": null,
            "Labels": null
        },
        "Architecture": "amd64",
        "Os": "linux",
        "Size": 1840,
        "VirtualSize": 1840,
        "GraphDriver": {
            "Data": {
                "MergedDir": "/var/lib/docker/overlay2/e494ae30abc49ad403ef5c2a32bcb894629ea4da6d4d226fbca70d27ed9a74d8/merged",
                "UpperDir": "/var/lib/docker/overlay2/e494ae30abc49ad403ef5c2a32bcb894629ea4da6d4d226fbca70d27ed9a74d8/diff",
                "WorkDir": "/var/lib/docker/overlay2/e494ae30abc49ad403ef5c2a32bcb894629ea4da6d4d226fbca70d27ed9a74d8/work"
            },
            "Name": "overlay2"
        },
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:428c97da766c4c13b19088a471de6b622b038f3ae8efa10ec5a37d6d31a2df0b"
            ]
        },
        "Metadata": {
            "LastTagTime": "0001-01-01T00:00:00Z"
        }
    }
]
</code></pre></div></div>

<h2 id="maintained-by">Maintained by:</h2>
<p>Ajeet Singh Raina</p>

<p><a href="https://collabnix.github.io/dockerlabs/beginners/workingwithdockerimage.html">Next: Working with Docker Images</a></p>
:ET